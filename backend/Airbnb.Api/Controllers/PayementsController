using Airbnb.Application.Dtos;
using Airbnb.Application.Services.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace Airbnb.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class PaymentsController : ControllerBase
    {
        private readonly IPaymentService _paymentService;
        private readonly ILogger<PaymentsController> _logger;

        public PaymentsController(IPaymentService paymentService, ILogger<PaymentsController> logger)
        {
            _paymentService = paymentService;
            _logger = logger;
        }

        [HttpPost("process")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<IActionResult> ProcessPayment([FromBody] PaymentProcessDto paymentDto)
        {
            try
            {
                _logger.LogInformation("Processing payment for booking ID: {BookingId}", paymentDto.BookingId);
                
                var result = await _paymentService.ProcessPaymentAsync(paymentDto);
                
                _logger.LogInformation("Payment processed successfully for booking ID: {BookingId}, Payment ID: {PaymentId}", 
                    paymentDto.BookingId, result.PaymentId);
                
                return Ok(new { 
                    Message = "Payment processed successfully", 
                    PaymentId = result.PaymentId,
                    Status = result.Status,
                    TransactionDate = result.TransactionDate
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing payment for booking ID: {BookingId}", paymentDto.BookingId);
                return BadRequest(new { Message = ex.Message });
            }
        }

        [HttpGet("status/{paymentId}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<IActionResult> GetPaymentStatus(string paymentId)
        {
            try
            {
                _logger.LogInformation("Fetching payment status for Payment ID: {PaymentId}", paymentId);
                
                var status = await _paymentService.GetPaymentStatusAsync(paymentId);
                
                return Ok(new { 
                    PaymentId = paymentId, 
                    Status = status 
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error fetching payment status for Payment ID: {PaymentId}", paymentId);
                return NotFound(new { Message = ex.Message });
            }
        }

        [HttpGet("booking/{bookingId}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<IActionResult> GetPaymentByBookingId(int bookingId)
        {
            try
            {
                _logger.LogInformation("Fetching payment for booking ID: {BookingId}", bookingId);
                
                var payment = await _paymentService.GetPaymentByBookingIdAsync(bookingId);
                
                return Ok(payment);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error fetching payment for booking ID: {BookingId}", bookingId);
                return NotFound(new { Message = ex.Message });
            }
        }

        [HttpPost("refund/{paymentId}")]
        [Authorize(Policy = "RequireHostRole")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<IActionResult> ProcessRefund(string paymentId)
        {
            try
            {
                _logger.LogInformation("Processing refund for payment ID: {PaymentId}", paymentId);
                
                var result = await _paymentService.ProcessRefundAsync(paymentId);
                
                _logger.LogInformation("Refund processed successfully for payment ID: {PaymentId}", paymentId);
                return Ok(new { 
                    Message = "Refund processed successfully", 
                    RefundId = result.RefundId,
                    Status = result.Status 
                });
            }
            catch (Exception ex)