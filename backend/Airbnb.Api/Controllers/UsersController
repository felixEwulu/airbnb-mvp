using Airbnb.Application.Dtos;
using Airbnb.Application.Services.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace Airbnb.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class UsersController : ControllerBase
    {
        private readonly IUserService _userService;
        private readonly ILogger<UsersController> _logger;

        public UsersController(IUserService userService, ILogger<UsersController> logger)
        {
            _userService = userService;
            _logger = logger;
        }

        [HttpPost("register")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<IActionResult> Register([FromBody] UserRegistrationDto registrationDto)
        {
            try
            {
                _logger.LogInformation("Attempting to register new user: {Email}", registrationDto.Email);
                
                var result = await _userService.RegisterAsync(registrationDto);
                
                _logger.LogInformation("User registered successfully: {Email}", registrationDto.Email);
                return Ok(new { 
                    Message = "User registered successfully", 
                    UserId = result.UserId,
                    Token = result.Token 
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error registering user: {Email}", registrationDto.Email);
                return BadRequest(new { Message = ex.Message });
            }
        }

        [HttpPost("login")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        public async Task<IActionResult> Login([FromBody] UserLoginDto loginDto)
        {
            try
            {
                _logger.LogInformation("Login attempt for user: {Email}", loginDto.Email);
                
                var result = await _userService.LoginAsync(loginDto);
                
                _logger.LogInformation("User logged in successfully: {Email}", loginDto.Email);
                return Ok(new { 
                    Message = "Login successful", 
                    Token = result.Token,
                    UserId = result.UserId,
                    ExpiresIn = result.ExpiresIn 
                });
            }
            catch (Exception ex)
            {
                _logger.LogWarning("Failed login attempt for user: {Email}", loginDto.Email);
                return Unauthorized(new { Message = ex.Message });
            }
        }

        [HttpGet("profile/{userId}")]
        [Authorize]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        public async Task<IActionResult> GetProfile(int userId)
        {
            try
            {
                _logger.LogInformation("Fetching profile for user ID: {UserId}", userId);
                
                var profile = await _userService.GetProfileAsync(userId);
                
                return Ok(profile);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error fetching profile for user ID: {UserId}", userId);
                return NotFound(new { Message = ex.Message });
            }
        }

        [HttpPut("profile/{userId}")]
        [Authorize]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<IActionResult> UpdateProfile(int userId, [FromBody] UserUpdateDto updateDto)
        {
            try
            {
                _logger.LogInformation("Updating profile for user ID: {UserId}", userId);
                
                var updatedProfile = await _userService.UpdateProfileAsync(userId, updateDto);
                
                _logger.LogInformation("Profile updated successfully for user ID: {UserId}", userId);
                return Ok(new { Message = "Profile updated successfully", Profile = updatedProfile });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating profile for user ID: {UserId}", userId);
                return BadRequest(new { Message = ex.Message });
            }
        }
    }
}