using Airbnb.Application.Dtos;
using Airbnb.Application.Services.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace Airbnb.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class PropertiesController : ControllerBase
    {
        private readonly IPropertyService _propertyService;
        private readonly ILogger<PropertiesController> _logger;

        public PropertiesController(IPropertyService propertyService, ILogger<PropertiesController> logger)
        {
            _propertyService = propertyService;
            _logger = logger;
        }

        [HttpGet]
        [AllowAnonymous]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<IActionResult> GetAllProperties(
            [FromQuery] string? location,
            [FromQuery] decimal? minPrice,
            [FromQuery] decimal? maxPrice,
            [FromQuery] int? guests,
            [FromQuery] int page = 1,
            [FromQuery] int pageSize = 10)
        {
            try
            {
                _logger.LogInformation("Fetching properties with filters: Location={Location}, MinPrice={MinPrice}, MaxPrice={MaxPrice}", 
                    location, minPrice, maxPrice);
                
                var properties = await _propertyService.GetAllPropertiesAsync(location, minPrice, maxPrice, guests, page, pageSize);
                
                return Ok(properties);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error fetching properties");
                return StatusCode(500, new { Message = "Internal server error" });
            }
        }

        [HttpGet("{id}")]
        [AllowAnonymous]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<IActionResult> GetPropertyById(int id)
        {
            try
            {
                _logger.LogInformation("Fetching property with ID: {PropertyId}", id);
                
                var property = await _propertyService.GetPropertyByIdAsync(id);
                
                return Ok(property);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error fetching property with ID: {PropertyId}", id);
                return NotFound(new { Message = ex.Message });
            }
        }

        [HttpPost]
        [Authorize(Policy = "RequireHostRole")]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<IActionResult> CreateProperty([FromBody] PropertyCreateDto propertyDto)
        {
            try
            {
                _logger.LogInformation("Creating new property: {Title}", propertyDto.Title);
                
                var createdProperty = await _propertyService.CreatePropertyAsync(propertyDto);
                
                _logger.LogInformation("Property created successfully with ID: {PropertyId}", createdProperty.Id);
                return CreatedAtAction(nameof(GetPropertyById), new { id = createdProperty.Id }, createdProperty);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating property: {Title}", propertyDto.Title);
                return BadRequest(new { Message = ex.Message });
            }
        }

        [HttpPut("{id}")]
        [Authorize(Policy = "RequireHostRole")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<IActionResult> UpdateProperty(int id, [FromBody] PropertyUpdateDto propertyDto)
        {
            try
            {
                _logger.LogInformation("Updating property with ID: {PropertyId}", id);
                
                var updatedProperty = await _propertyService.UpdatePropertyAsync(id, propertyDto);
                
                _logger.LogInformation("Property updated successfully: {PropertyId}", id);
                return Ok(updatedProperty);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating property with ID: {PropertyId}", id);
                return BadRequest(new { Message = ex.Message });
            }
        }

        [HttpDelete("{id}")]
        [Authorize(Policy = "RequireHostRole")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<IActionResult> DeleteProperty(int id)
        {
            try
            {
                _logger.LogInformation("Deleting property with ID: {PropertyId}", id);
                
                await _propertyService.DeletePropertyAsync(id);
                
                _logger.LogInformation("Property deleted successfully: {PropertyId}", id);
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting property with ID: {PropertyId}", id);
                return BadRequest(new { Message = ex.Message });
            }
        }

        [HttpGet("user/{userId}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<IActionResult> GetUserProperties(int userId)
        {
            try
            {
                _logger.LogInformation("Fetching properties for user ID: {UserId}", userId);
                
                var properties = await _propertyService.GetUserPropertiesAsync(userId);
                
                return Ok(properties);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error fetching properties for user ID: {UserId}", userId);
                return BadRequest(new { Message = ex.Message });
            }
        }
    }
}